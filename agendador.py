# -*- coding: utf-8 -*-
"""Agendador.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zixnV5z3TWn5ovCumxXrsSCpIApCHLZx
"""

import re
from datetime import datetime, timedelta

def parse_aulas(file_path='aulas.txt'):
   
    aulas = []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue

                match = re.match(r'(.+?)\s+-\s+(.+)', line)
                if not match:
                    continue

                titulo, prof_e_duracao = match.groups()

                if 'lightning' in prof_e_duracao:
                    duracao = 5
                    professor = prof_e_duracao.replace('lightning', '').strip()
                else:
                    duracao_match = re.search(r'(\d+)min$', prof_e_duracao)
                    duracao = int(duracao_match.group(1))
                    professor = prof_e_duracao.replace(duracao_match.group(0), '').strip()

                aulas.append({'titulo': titulo, 'professor': professor, 'duracao': duracao})
    except FileNotFoundError:
        # Retorna uma lista vazia e uma flag de erro se o arquivo n√£o for encontrado
        return [], True

    return aulas, False

def agendar_aulas(aulas):
    
    # Ordena as aulas pela dura√ß√£o, da maior para a menor
    aulas_ordenadas = sorted(aulas, key=lambda x: x['duracao'], reverse=True)

    grade_semanal = []
    aulas_para_agendar = list(aulas_ordenadas)

    while aulas_para_agendar:
        dia = {'manha': [], 'tarde': []}

        # --- Sess√£o da Manh√£ (180 min) ---
        tempo_restante_manha = 180
        professores_na_sessao_manha = set()
        aulas_agendadas_nesta_sessao = []

        for aula in list(aulas_para_agendar):
            if aula['duracao'] <= tempo_restante_manha and aula['professor'] not in professores_na_sessao_manha:
                dia['manha'].append(aula)
                tempo_restante_manha -= aula['duracao']
                professores_na_sessao_manha.add(aula['professor'])
                aulas_agendadas_nesta_sessao.append(aula)

        for aula in aulas_agendadas_nesta_sessao:
            aulas_para_agendar.remove(aula)

        # --- Sess√£o da Tarde (240 min) ---
        tempo_restante_tarde = 240
        professores_na_sessao_tarde = set()
        aulas_agendadas_nesta_sessao = []

        for aula in list(aulas_para_agendar):
            if aula['duracao'] <= tempo_restante_tarde and aula['professor'] not in professores_na_sessao_tarde:
                dia['tarde'].append(aula)
                tempo_restante_tarde -= aula['duracao']
                professores_na_sessao_tarde.add(aula['professor'])
                aulas_agendadas_nesta_sessao.append(aula)

        for aula in aulas_agendadas_nesta_sessao:
            aulas_para_agendar.remove(aula)

        grade_semanal.append(dia)

    return grade_semanal

def imprimir_grade(grade):
   
    dias_da_semana = ["Segunda-feira", "Ter√ßa-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira"]

    for i, dia in enumerate(grade):
        nome_do_dia = dias_da_semana[i] if i < len(dias_da_semana) else f"Dia Extra {i - len(dias_da_semana) + 1}"
        print(f"üìÖ {nome_do_dia}:")

        # Manh√£
        horario_atual = datetime.strptime("09:00", "%H:%M")
        for aula in dia['manha']:
            duracao_str = "lightning" if aula['duracao'] == 5 else f"{aula['duracao']}min"
            print(f"{horario_atual.strftime('%H:%M')} {aula['titulo']} - {aula['professor']} {duracao_str}")
            horario_atual += timedelta(minutes=aula['duracao'])

        print("12:00 Intervalo para Almo√ßo")
        print()

        # Tarde
        horario_atual = datetime.strptime("13:00", "%H:%M")
        if not dia['tarde']:
            print("13:00 (sem aulas dispon√≠veis)")
        else:
            for aula in dia['tarde']:
                duracao_str = "lightning" if aula['duracao'] == 5 else f"{aula['duracao']}min"
                print(f"{horario_atual.strftime('%H:%M')} {aula['titulo']} - {aula['professor']} {duracao_str}")
                horario_atual += timedelta(minutes=aula['duracao'])

        print("17:00 Reuni√£o de Professores")

        if i < len(grade) - 1:
            print("\n" + "-"*40 + "\n")



# Tenta ler o arquivo. Se n√£o existir, cria um de exemplo.
lista_de_aulas, erro_arquivo = parse_aulas('aulas.txt')

if erro_arquivo:
    print("Arquivo 'aulas.txt' n√£o encontrado. Criando um arquivo de exemplo...")
    conteudo_aulas = """Introdu√ß√£o √† IA - Prof. Jo√£o 60min
T√©cnicas de Aprendizado Supervisionado - Prof. Ana 45min
Redes Neurais Convolucionais - Prof. Jo√£o 30min
√âtica na IA - Prof. Carla lightning
Linguagens de Programa√ß√£o Funcionais - Prof. Paulo 45min
Hist√≥ria da Computa√ß√£o - Prof. Carla 30min
Banco de Dados NoSQL - Prof. Ana 60min
L√≥gica Computacional - Prof. Paulo 45min
Compiladores e Interpretadores - Prof. Jo√£o 60min
Computa√ß√£o Qu√¢ntica - Prof. Carla 45min
Algoritmos Avan√ßados - Prof. Ana 60min
Programa√ß√£o Paralela - Prof. Paulo 30min
Pensamento Computacional - Prof. Carla 30min
"""
    with open('aulas.txt', 'w', encoding='utf-8') as f:
        f.write(conteudo_aulas.strip())
    print("Arquivo 'aulas.txt' criado. Rode o script novamente para ver a grade.")
else:
    try:
        grade_final = agendar_aulas(lista_de_aulas)
        imprimir_grade(grade_final)
    except KeyError as e:
        print(f"Ocorreu um erro de chave: {e}. Verifique se todas as chaves no c√≥digo est√£o corretas.")
    except Exception as e:
        print(f"Ocorreu um erro inesperado: {e}")
